#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vbotserver
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="vbot")]
	public partial class VBotDB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocalUser(LocalUser instance);
    partial void UpdateLocalUser(LocalUser instance);
    partial void DeleteLocalUser(LocalUser instance);
    partial void InsertUserLastList(UserLastList instance);
    partial void UpdateUserLastList(UserLastList instance);
    partial void DeleteUserLastList(UserLastList instance);
    partial void InsertUserLocation(UserLocation instance);
    partial void UpdateUserLocation(UserLocation instance);
    partial void DeleteUserLocation(UserLocation instance);
    partial void InsertUserPostIndex(UserPostIndex instance);
    partial void UpdateUserPostIndex(UserPostIndex instance);
    partial void DeleteUserPostIndex(UserPostIndex instance);
    #endregion
		
		public VBotDB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VBotDB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VBotDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VBotDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LocalUser> LocalUsers
		{
			get
			{
				return this.GetTable<LocalUser>();
			}
		}
		
		public System.Data.Linq.Table<UserLastList> UserLastLists
		{
			get
			{
				return this.GetTable<UserLastList>();
			}
		}
		
		public System.Data.Linq.Table<UserLocation> UserLocations
		{
			get
			{
				return this.GetTable<UserLocation>();
			}
		}
		
		public System.Data.Linq.Table<UserPostIndex> UserPostIndexes
		{
			get
			{
				return this.GetTable<UserPostIndex>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class LocalUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocalUserID;
		
		private string _Service;
		
		private string _Screenname;
		
		private System.Nullable<int> _BoardUserID;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocalUserIDChanging(int value);
    partial void OnLocalUserIDChanged();
    partial void OnServiceChanging(string value);
    partial void OnServiceChanged();
    partial void OnScreennameChanging(string value);
    partial void OnScreennameChanged();
    partial void OnBoardUserIDChanging(System.Nullable<int> value);
    partial void OnBoardUserIDChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public LocalUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocalUserID
		{
			get
			{
				return this._LocalUserID;
			}
			set
			{
				if ((this._LocalUserID != value))
				{
					this.OnLocalUserIDChanging(value);
					this.SendPropertyChanging();
					this._LocalUserID = value;
					this.SendPropertyChanged("LocalUserID");
					this.OnLocalUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service", DbType="NVarChar(100)")]
		public string Service
		{
			get
			{
				return this._Service;
			}
			set
			{
				if ((this._Service != value))
				{
					this.OnServiceChanging(value);
					this.SendPropertyChanging();
					this._Service = value;
					this.SendPropertyChanged("Service");
					this.OnServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Screenname", DbType="NVarChar(100)")]
		public string Screenname
		{
			get
			{
				return this._Screenname;
			}
			set
			{
				if ((this._Screenname != value))
				{
					this.OnScreennameChanging(value);
					this.SendPropertyChanging();
					this._Screenname = value;
					this.SendPropertyChanged("Screenname");
					this.OnScreennameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardUserID", DbType="Int")]
		public System.Nullable<int> BoardUserID
		{
			get
			{
				return this._BoardUserID;
			}
			set
			{
				if ((this._BoardUserID != value))
				{
					this.OnBoardUserIDChanging(value);
					this.SendPropertyChanging();
					this._BoardUserID = value;
					this.SendPropertyChanged("BoardUserID");
					this.OnBoardUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class UserLastList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserLastListID;
		
		private System.Nullable<int> _LocalUserID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserLastListIDChanging(int value);
    partial void OnUserLastListIDChanged();
    partial void OnLocalUserIDChanging(System.Nullable<int> value);
    partial void OnLocalUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserLastList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserLastListID
		{
			get
			{
				return this._UserLastListID;
			}
			set
			{
				if ((this._UserLastListID != value))
				{
					this.OnUserLastListIDChanging(value);
					this.SendPropertyChanging();
					this._UserLastListID = value;
					this.SendPropertyChanged("UserLastListID");
					this.OnUserLastListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalUserID", DbType="Int")]
		public System.Nullable<int> LocalUserID
		{
			get
			{
				return this._LocalUserID;
			}
			set
			{
				if ((this._LocalUserID != value))
				{
					this.OnLocalUserIDChanging(value);
					this.SendPropertyChanging();
					this._LocalUserID = value;
					this.SendPropertyChanged("LocalUserID");
					this.OnLocalUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class UserLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserLocationID;
		
		private System.Nullable<int> _LocalUserID;
		
		private string _UserLocationType;
		
		private string _List;
		
		private System.Nullable<int> _LocationRemoteID;
		
		private string _Title;
		
		private System.Nullable<int> _PageNumber;
		
		private System.Nullable<int> _PerPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserLocationIDChanging(int value);
    partial void OnUserLocationIDChanged();
    partial void OnLocalUserIDChanging(System.Nullable<int> value);
    partial void OnLocalUserIDChanged();
    partial void OnUserLocationTypeChanging(string value);
    partial void OnUserLocationTypeChanged();
    partial void OnListChanging(string value);
    partial void OnListChanged();
    partial void OnLocationRemoteIDChanging(System.Nullable<int> value);
    partial void OnLocationRemoteIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPageNumberChanging(System.Nullable<int> value);
    partial void OnPageNumberChanged();
    partial void OnPerPageChanging(System.Nullable<int> value);
    partial void OnPerPageChanged();
    #endregion
		
		public UserLocation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserLocationID
		{
			get
			{
				return this._UserLocationID;
			}
			set
			{
				if ((this._UserLocationID != value))
				{
					this.OnUserLocationIDChanging(value);
					this.SendPropertyChanging();
					this._UserLocationID = value;
					this.SendPropertyChanged("UserLocationID");
					this.OnUserLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalUserID", DbType="Int")]
		public System.Nullable<int> LocalUserID
		{
			get
			{
				return this._LocalUserID;
			}
			set
			{
				if ((this._LocalUserID != value))
				{
					this.OnLocalUserIDChanging(value);
					this.SendPropertyChanging();
					this._LocalUserID = value;
					this.SendPropertyChanged("LocalUserID");
					this.OnLocalUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLocationType", DbType="NVarChar(100)")]
		public string UserLocationType
		{
			get
			{
				return this._UserLocationType;
			}
			set
			{
				if ((this._UserLocationType != value))
				{
					this.OnUserLocationTypeChanging(value);
					this.SendPropertyChanging();
					this._UserLocationType = value;
					this.SendPropertyChanged("UserLocationType");
					this.OnUserLocationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_List", DbType="NVarChar(100)")]
		public string List
		{
			get
			{
				return this._List;
			}
			set
			{
				if ((this._List != value))
				{
					this.OnListChanging(value);
					this.SendPropertyChanging();
					this._List = value;
					this.SendPropertyChanged("List");
					this.OnListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationRemoteID", DbType="Int")]
		public System.Nullable<int> LocationRemoteID
		{
			get
			{
				return this._LocationRemoteID;
			}
			set
			{
				if ((this._LocationRemoteID != value))
				{
					this.OnLocationRemoteIDChanging(value);
					this.SendPropertyChanging();
					this._LocationRemoteID = value;
					this.SendPropertyChanged("LocationRemoteID");
					this.OnLocationRemoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageNumber", DbType="Int")]
		public System.Nullable<int> PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerPage", DbType="Int")]
		public System.Nullable<int> PerPage
		{
			get
			{
				return this._PerPage;
			}
			set
			{
				if ((this._PerPage != value))
				{
					this.OnPerPageChanging(value);
					this.SendPropertyChanging();
					this._PerPage = value;
					this.SendPropertyChanged("PerPage");
					this.OnPerPageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class UserPostIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserPostIndexID;
		
		private System.Nullable<int> _LocalUserID;
		
		private System.Nullable<int> _PostIndex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserPostIndexIDChanging(int value);
    partial void OnUserPostIndexIDChanged();
    partial void OnLocalUserIDChanging(System.Nullable<int> value);
    partial void OnLocalUserIDChanged();
    partial void OnPostIndexChanging(System.Nullable<int> value);
    partial void OnPostIndexChanged();
    #endregion
		
		public UserPostIndex()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPostIndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserPostIndexID
		{
			get
			{
				return this._UserPostIndexID;
			}
			set
			{
				if ((this._UserPostIndexID != value))
				{
					this.OnUserPostIndexIDChanging(value);
					this.SendPropertyChanging();
					this._UserPostIndexID = value;
					this.SendPropertyChanged("UserPostIndexID");
					this.OnUserPostIndexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalUserID", DbType="Int")]
		public System.Nullable<int> LocalUserID
		{
			get
			{
				return this._LocalUserID;
			}
			set
			{
				if ((this._LocalUserID != value))
				{
					this.OnLocalUserIDChanging(value);
					this.SendPropertyChanging();
					this._LocalUserID = value;
					this.SendPropertyChanged("LocalUserID");
					this.OnLocalUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostIndex", DbType="Int")]
		public System.Nullable<int> PostIndex
		{
			get
			{
				return this._PostIndex;
			}
			set
			{
				if ((this._PostIndex != value))
				{
					this.OnPostIndexChanging(value);
					this.SendPropertyChanging();
					this._PostIndex = value;
					this.SendPropertyChanged("PostIndex");
					this.OnPostIndexChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
